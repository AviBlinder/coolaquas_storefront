https://docs.amplify.aws/cli/graphql/authorization-rules/#global-authorization-rule-only-for-getting-started

type Todo @model @auth(rules: [{ allow: owner }]) {
  content: String
}

type Todo @model @auth(rules: [
  { allow: public, operations: [read]}
  { allow: owner }
]) {
  content: String
}

Strategies:
public/owner/private/group/custom

Per-user / owner-based data access:
type Todo @model @auth(rules: [{ allow: owner }]) {
//Behind the scenes, Amplify will automatically add a owner: String field to each
// record which contains the record owner's identity information upon record
// creation.

//You can override the owner field to your own preferred field, by specifying a
// custom ownerField in the authorization rule:
type Todo @model @auth(rules: [{ allow: owner, ownerField: "authors" }]) {
  content: String
  authors: [String]
  or
  author: String
}

//Known limitation: Real-time subscriptions are not supported when owner 
// authorization is configured with a list of owners.

User group-based data access:
To restrict access based on user groups, use the group authorization strategy.

Static group authorization: When you want to restrict access to a specific 
set of user groups, provide the group names in the groups parameter.
type Salary @model @auth(rules: [{ allow: groups, groups: ["Admin"] }]) {
  id: ID!
  wage: Int
  currency: String
}
//In the example above, only users that are part of the "Admin" user group are 
// granted access to the Salary model.
Dynamic group authorization: When you want to restrict access to a set of 
user groups.
# Dynamic group authorization with multiple groups
type Post @model @auth(rules: [{ allow: groups, groupsField: "groups" }]) {
  id: ID!
  title: String
  groups: [String]
}

# Dynamic group authorization with a single group
type Post @model @auth(rules: [{ allow: groups, groupsField: "group" }]) {
  id: ID!
  title: String
  group: String
}


Configure multiple authorization rules
When combining multiple authorization rules, they are "logically OR"-ed.
type Post @model @auth(rules: [
  { allow: public, operations: [read], provider: iam },
  { allow: owner }]) {
  title: String
  content: String
}
In the example above:
any user (signed in or not, verified by IAM) is allowed to read all posts
owners are allowed to create, read, update, and delete their own posts.

Field-level authorization rules:
When an authorization rule is added to a field, it'll strictly define the
 authorization rules applied on the field. 
Field-level authorization rules do not inherit model-level authorization rules. 
Meaning, only the specified rule is always applied.
type Employee @model @auth(rules: [
  { allow: private, operations: [read] },
  { allow: owner }
]) {
  name: String
  email: String
  ssn: String @auth(rules: [{ allow: owner }])
}

Review and print access control matrix
amplify status api -acm Blog

amplify console api
