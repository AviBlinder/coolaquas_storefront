Filter & Sort (API?)
Reactivity!!
User Authentication

Add "value proposition" blok
Add 'general settings' component (currency, currency_sign, shipping...)
---> Build New clean storefront (based on TS + Componsition APIs)
---> Add Jest/Cypress tests
---> Add Github Actions

Bugs:
- Cart is not responsive  --> Fix when creating clean frontstore

Checkout Feature:
- Add 'quick checkout' on each product

- Make all pages reactive

- Sort (view Ninja TS sample) & Filter 

- Account: Login/Signin/Logout

- Enhance navbar and clip-path(image)?

Enhancements (next epics):
- Create new project (github backed) with 
  - clean components only
  - TS + Composition APIs
  - JEST tests
  - Github Actions
- Sub-categories
- Hero image ?


paypal setup:
1. Copy component
2. Set credentials
3 npm install --save-dev vue-plugin-load-script


Sync parent v-model based on child changes
@update:modelValue='updateOrderShippingDetails' 

@input vs @change:
The difference is that the **oninput** event occurs immediately after the value of an element has changed,
 while **onchange** occurs when the element loses focus, after the content has been changed.

 onfocus <> onblur (element loses focus)


import state from './state'
import * as getters from './getters'
import * as mutations from './mutations'
import * as actions from './actions'

Resources:
https://softauthor.com/vuejs-composition-api-search-bar-using-computed-properties/

https://softauthor.com/vue-js-3-composition-api-reusable-scalable-form-validation/
- Validate input field events: @blur / @keyup
- @input="$emit('update:modelValue', $event.target.value)"  --> 'magically" updated the v-model property associated to the component
- Input attributed:
  - disable:      :disabled="isSignupButtonDisabled"
  - novalidate:    <form @submit.prevent novalidate class="ui form">


vue-select:
<link rel="stylesheet" href="https://unpkg.com/vue-select@3.0.0/dist/vue-select.css">
v-select has following options which I used in the example –
1. :options – Load options list. Require Array type value.
2. label – If :options has an array of objects then you need to specify the key name which use for the label otherwise 
  the list label not will not show e.g. – { id: 1, name: Yogesh }. Here, use name key for the label.
NOTE – It is not require for single dimensional Array e.g. – [ yogesh, visual, sonarika ]
3. :reduce – if :options has an array of objects. In this case when you read selected option value then it contains the whole object. 
You need to read required key from the object.
With :reduce you can return the single key value. e.g. { id: 1, name: Yogesh }.

v-select methods which I used in the example –

@search – This event trigger when updating the search text. Use this for load options using AJAX.
@input – This event trigger on value state change. You can use this method to perform action based on option selection.

<v-select 
    v-model="user" 
    :options="users_options">
</v-select>

<v-select label="name" 
	v-model="country" 
	:reduce="country => country.id" 
	:options="country_options" 
	@search="fetchOptions" 
    @input="selectedOption" >
</v-select>


Created 4 data variables –

user – Model variable of 1st v-select. Use to retrieve selected option value.
country – Model variable of 2nd v-select. Use to retrieve selected option value.
users_options – Stored user names in the Array. This use for options load for 1st v-select.
country_options – An empty array. This use for options load for 2nd v-select.
Created 2 methods –

fetchOptions – This option trigger on @search event trigger. It has 2 parameters –

search – The current input text.
loading – Boolean parameter to toggle the loading state.

Vue.component('v-select', VueSelect.VueSelect)

new Vue({
   el: '#app',
   data: {
     user: "",
     country: 0,
     users_options: [
       "Yogesh singh",
       "Sunil singh",
       "Sonarika bhadoria",
       "Akilesh sahu",
       "Mayank patidar"
     ],
     country_options: []
   },
   methods: {
      fetchOptions: function(search,loading){

        var el = this;

        // AJAX request
        axios.get('ajaxfile.php', {
           params: {
              search: search, 
           }
        })
        .then(function (response) {

           // Update options
           el.country_options = response.data; 

        });

      },
      selectedOption: function(value){
         console.log("value : " + value);
      }
   }
})  